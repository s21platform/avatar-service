// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/s21platform/avatar-service/pkg/avatar (interfaces: AvatarService_SetUserAvatarServer,AvatarService_SetSocietyAvatarServer)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	avatar "github.com/s21platform/avatar-service/pkg/avatar"
	metadata "google.golang.org/grpc/metadata"
)

// MockAvatarService_SetUserAvatarServer is a mock of AvatarService_SetUserAvatarServer interface.
type MockAvatarService_SetUserAvatarServer struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarService_SetUserAvatarServerMockRecorder
}

// MockAvatarService_SetUserAvatarServerMockRecorder is the mock recorder for MockAvatarService_SetUserAvatarServer.
type MockAvatarService_SetUserAvatarServerMockRecorder struct {
	mock *MockAvatarService_SetUserAvatarServer
}

// NewMockAvatarService_SetUserAvatarServer creates a new mock instance.
func NewMockAvatarService_SetUserAvatarServer(ctrl *gomock.Controller) *MockAvatarService_SetUserAvatarServer {
	mock := &MockAvatarService_SetUserAvatarServer{ctrl: ctrl}
	mock.recorder = &MockAvatarService_SetUserAvatarServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarService_SetUserAvatarServer) EXPECT() *MockAvatarService_SetUserAvatarServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) Recv() (*avatar.SetUserAvatarIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*avatar.SetUserAvatarIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) SendAndClose(arg0 *avatar.SetUserAvatarOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAvatarService_SetUserAvatarServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAvatarService_SetUserAvatarServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAvatarService_SetUserAvatarServer)(nil).SetTrailer), arg0)
}

// MockAvatarService_SetSocietyAvatarServer is a mock of AvatarService_SetSocietyAvatarServer interface.
type MockAvatarService_SetSocietyAvatarServer struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarService_SetSocietyAvatarServerMockRecorder
}

// MockAvatarService_SetSocietyAvatarServerMockRecorder is the mock recorder for MockAvatarService_SetSocietyAvatarServer.
type MockAvatarService_SetSocietyAvatarServerMockRecorder struct {
	mock *MockAvatarService_SetSocietyAvatarServer
}

// NewMockAvatarService_SetSocietyAvatarServer creates a new mock instance.
func NewMockAvatarService_SetSocietyAvatarServer(ctrl *gomock.Controller) *MockAvatarService_SetSocietyAvatarServer {
	mock := &MockAvatarService_SetSocietyAvatarServer{ctrl: ctrl}
	mock.recorder = &MockAvatarService_SetSocietyAvatarServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarService_SetSocietyAvatarServer) EXPECT() *MockAvatarService_SetSocietyAvatarServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) Recv() (*avatar.SetSocietyAvatarIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*avatar.SetSocietyAvatarIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) SendAndClose(arg0 *avatar.SetSocietyAvatarOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAvatarService_SetSocietyAvatarServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAvatarService_SetSocietyAvatarServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAvatarService_SetSocietyAvatarServer)(nil).SetTrailer), arg0)
}
