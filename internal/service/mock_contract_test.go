// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/avatar-service/internal/model"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// DeleteSocietyAvatar mocks base method.
func (m *MockDBRepo) DeleteSocietyAvatar(ctx context.Context, avatarID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocietyAvatar", ctx, avatarID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSocietyAvatar indicates an expected call of DeleteSocietyAvatar.
func (mr *MockDBRepoMockRecorder) DeleteSocietyAvatar(ctx, avatarID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocietyAvatar", reflect.TypeOf((*MockDBRepo)(nil).DeleteSocietyAvatar), ctx, avatarID)
}

// DeleteUserAvatar mocks base method.
func (m *MockDBRepo) DeleteUserAvatar(ctx context.Context, avatarID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAvatar", ctx, avatarID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAvatar indicates an expected call of DeleteUserAvatar.
func (mr *MockDBRepoMockRecorder) DeleteUserAvatar(ctx, avatarID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAvatar", reflect.TypeOf((*MockDBRepo)(nil).DeleteUserAvatar), ctx, avatarID)
}

// GetAllSocietyAvatars mocks base method.
func (m *MockDBRepo) GetAllSocietyAvatars(ctx context.Context, UUID string) (*model.AvatarMetadataList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSocietyAvatars", ctx, UUID)
	ret0, _ := ret[0].(*model.AvatarMetadataList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSocietyAvatars indicates an expected call of GetAllSocietyAvatars.
func (mr *MockDBRepoMockRecorder) GetAllSocietyAvatars(ctx, UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSocietyAvatars", reflect.TypeOf((*MockDBRepo)(nil).GetAllSocietyAvatars), ctx, UUID)
}

// GetAllUserAvatars mocks base method.
func (m *MockDBRepo) GetAllUserAvatars(ctx context.Context, UUID string) (*model.AvatarMetadataList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserAvatars", ctx, UUID)
	ret0, _ := ret[0].(*model.AvatarMetadataList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserAvatars indicates an expected call of GetAllUserAvatars.
func (mr *MockDBRepoMockRecorder) GetAllUserAvatars(ctx, UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserAvatars", reflect.TypeOf((*MockDBRepo)(nil).GetAllUserAvatars), ctx, UUID)
}

// GetLatestSocietyAvatar mocks base method.
func (m *MockDBRepo) GetLatestSocietyAvatar(ctx context.Context, UUID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSocietyAvatar", ctx, UUID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLatestSocietyAvatar indicates an expected call of GetLatestSocietyAvatar.
func (mr *MockDBRepoMockRecorder) GetLatestSocietyAvatar(ctx, UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSocietyAvatar", reflect.TypeOf((*MockDBRepo)(nil).GetLatestSocietyAvatar), ctx, UUID)
}

// GetLatestUserAvatar mocks base method.
func (m *MockDBRepo) GetLatestUserAvatar(ctx context.Context, UUID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUserAvatar", ctx, UUID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLatestUserAvatar indicates an expected call of GetLatestUserAvatar.
func (mr *MockDBRepoMockRecorder) GetLatestUserAvatar(ctx, UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUserAvatar", reflect.TypeOf((*MockDBRepo)(nil).GetLatestUserAvatar), ctx, UUID)
}

// GetSocietyAvatarData mocks base method.
func (m *MockDBRepo) GetSocietyAvatarData(ctx context.Context, avatarID int) (*model.AvatarMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocietyAvatarData", ctx, avatarID)
	ret0, _ := ret[0].(*model.AvatarMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocietyAvatarData indicates an expected call of GetSocietyAvatarData.
func (mr *MockDBRepoMockRecorder) GetSocietyAvatarData(ctx, avatarID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocietyAvatarData", reflect.TypeOf((*MockDBRepo)(nil).GetSocietyAvatarData), ctx, avatarID)
}

// GetUserAvatarData mocks base method.
func (m *MockDBRepo) GetUserAvatarData(ctx context.Context, avatarID int) (*model.AvatarMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAvatarData", ctx, avatarID)
	ret0, _ := ret[0].(*model.AvatarMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvatarData indicates an expected call of GetUserAvatarData.
func (mr *MockDBRepoMockRecorder) GetUserAvatarData(ctx, avatarID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvatarData", reflect.TypeOf((*MockDBRepo)(nil).GetUserAvatarData), ctx, avatarID)
}

// SetSocietyAvatar mocks base method.
func (m *MockDBRepo) SetSocietyAvatar(ctx context.Context, UUID, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSocietyAvatar", ctx, UUID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSocietyAvatar indicates an expected call of SetSocietyAvatar.
func (mr *MockDBRepoMockRecorder) SetSocietyAvatar(ctx, UUID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSocietyAvatar", reflect.TypeOf((*MockDBRepo)(nil).SetSocietyAvatar), ctx, UUID, link)
}

// SetUserAvatar mocks base method.
func (m *MockDBRepo) SetUserAvatar(ctx context.Context, UUID, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAvatar", ctx, UUID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAvatar indicates an expected call of SetUserAvatar.
func (mr *MockDBRepoMockRecorder) SetUserAvatar(ctx, UUID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAvatar", reflect.TypeOf((*MockDBRepo)(nil).SetUserAvatar), ctx, UUID, link)
}

// MockS3Storage is a mock of S3Storage interface.
type MockS3Storage struct {
	ctrl     *gomock.Controller
	recorder *MockS3StorageMockRecorder
}

// MockS3StorageMockRecorder is the mock recorder for MockS3Storage.
type MockS3StorageMockRecorder struct {
	mock *MockS3Storage
}

// NewMockS3Storage creates a new mock instance.
func NewMockS3Storage(ctrl *gomock.Controller) *MockS3Storage {
	mock := &MockS3Storage{ctrl: ctrl}
	mock.recorder = &MockS3StorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Storage) EXPECT() *MockS3StorageMockRecorder {
	return m.recorder
}

// BucketName mocks base method.
func (m *MockS3Storage) BucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BucketName indicates an expected call of BucketName.
func (mr *MockS3StorageMockRecorder) BucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketName", reflect.TypeOf((*MockS3Storage)(nil).BucketName))
}

// PutObject mocks base method.
func (m *MockS3Storage) PutObject(ctx context.Context, avatar *model.AvatarContent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, avatar)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3StorageMockRecorder) PutObject(ctx, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3Storage)(nil).PutObject), ctx, avatar)
}

// RemoveObject mocks base method.
func (m *MockS3Storage) RemoveObject(ctx context.Context, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObject", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObject indicates an expected call of RemoveObject.
func (mr *MockS3StorageMockRecorder) RemoveObject(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObject", reflect.TypeOf((*MockS3Storage)(nil).RemoveObject), ctx, link)
}

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockKafkaProducer) ProduceMessage(ctx context.Context, message, key interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockKafkaProducerMockRecorder) ProduceMessage(ctx, message, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockKafkaProducer)(nil).ProduceMessage), ctx, message, key)
}
